package com.yzz.adventure.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yzz.adventure.model.Stroy;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STROY".
*/
public class StroyDao extends AbstractDao<Stroy, Long> {

    public static final String TABLENAME = "STROY";

    /**
     * Properties of entity Stroy.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _Id = new Property(0, Long.class, "_Id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Hurt = new Property(2, int.class, "hurt", false, "HURT");
        public final static Property Treat = new Property(3, int.class, "treat", false, "TREAT");
        public final static Property Gold = new Property(4, int.class, "gold", false, "GOLD");
        public final static Property ItemId = new Property(5, String.class, "itemId", false, "ITEM_ID");
    }


    public StroyDao(DaoConfig config) {
        super(config);
    }
    
    public StroyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STROY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _Id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"HURT\" INTEGER NOT NULL ," + // 2: hurt
                "\"TREAT\" INTEGER NOT NULL ," + // 3: treat
                "\"GOLD\" INTEGER NOT NULL ," + // 4: gold
                "\"ITEM_ID\" TEXT);"); // 5: itemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STROY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Stroy entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getHurt());
        stmt.bindLong(4, entity.getTreat());
        stmt.bindLong(5, entity.getGold());
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(6, itemId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Stroy entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
        stmt.bindLong(2, entity.getType());
        stmt.bindLong(3, entity.getHurt());
        stmt.bindLong(4, entity.getTreat());
        stmt.bindLong(5, entity.getGold());
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(6, itemId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Stroy readEntity(Cursor cursor, int offset) {
        Stroy entity = new Stroy( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _Id
            cursor.getInt(offset + 1), // type
            cursor.getInt(offset + 2), // hurt
            cursor.getInt(offset + 3), // treat
            cursor.getInt(offset + 4), // gold
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // itemId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Stroy entity, int offset) {
        entity.set_Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setHurt(cursor.getInt(offset + 2));
        entity.setTreat(cursor.getInt(offset + 3));
        entity.setGold(cursor.getInt(offset + 4));
        entity.setItemId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Stroy entity, long rowId) {
        entity.set_Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Stroy entity) {
        if(entity != null) {
            return entity.get_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Stroy entity) {
        return entity.get_Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
