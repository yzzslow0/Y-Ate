package com.yzz.adventure.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yzz.adventure.model.GameContext;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME_CONTEXT".
*/
public class GameContextDao extends AbstractDao<GameContext, Long> {

    public static final String TABLENAME = "GAME_CONTEXT";

    /**
     * Properties of entity GameContext.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _Id = new Property(0, Long.class, "_Id", true, "_id");
        public final static Property Position = new Property(1, int.class, "position", false, "POSITION");
        public final static Property Position2 = new Property(2, int.class, "position2", false, "POSITION2");
        public final static Property Gold = new Property(3, int.class, "gold", false, "GOLD");
        public final static Property StartTime = new Property(4, int.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(5, int.class, "endTime", false, "END_TIME");
        public final static Property FightCount = new Property(6, int.class, "fightCount", false, "FIGHT_COUNT");
        public final static Property RunCount = new Property(7, int.class, "runCount", false, "RUN_COUNT");
    }


    public GameContextDao(DaoConfig config) {
        super(config);
    }
    
    public GameContextDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME_CONTEXT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _Id
                "\"POSITION\" INTEGER NOT NULL ," + // 1: position
                "\"POSITION2\" INTEGER NOT NULL ," + // 2: position2
                "\"GOLD\" INTEGER NOT NULL ," + // 3: gold
                "\"START_TIME\" INTEGER NOT NULL ," + // 4: startTime
                "\"END_TIME\" INTEGER NOT NULL ," + // 5: endTime
                "\"FIGHT_COUNT\" INTEGER NOT NULL ," + // 6: fightCount
                "\"RUN_COUNT\" INTEGER NOT NULL );"); // 7: runCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME_CONTEXT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GameContext entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getPosition2());
        stmt.bindLong(4, entity.getGold());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
        stmt.bindLong(7, entity.getFightCount());
        stmt.bindLong(8, entity.getRunCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GameContext entity) {
        stmt.clearBindings();
 
        Long _Id = entity.get_Id();
        if (_Id != null) {
            stmt.bindLong(1, _Id);
        }
        stmt.bindLong(2, entity.getPosition());
        stmt.bindLong(3, entity.getPosition2());
        stmt.bindLong(4, entity.getGold());
        stmt.bindLong(5, entity.getStartTime());
        stmt.bindLong(6, entity.getEndTime());
        stmt.bindLong(7, entity.getFightCount());
        stmt.bindLong(8, entity.getRunCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GameContext readEntity(Cursor cursor, int offset) {
        GameContext entity = new GameContext( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _Id
            cursor.getInt(offset + 1), // position
            cursor.getInt(offset + 2), // position2
            cursor.getInt(offset + 3), // gold
            cursor.getInt(offset + 4), // startTime
            cursor.getInt(offset + 5), // endTime
            cursor.getInt(offset + 6), // fightCount
            cursor.getInt(offset + 7) // runCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GameContext entity, int offset) {
        entity.set_Id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.getInt(offset + 1));
        entity.setPosition2(cursor.getInt(offset + 2));
        entity.setGold(cursor.getInt(offset + 3));
        entity.setStartTime(cursor.getInt(offset + 4));
        entity.setEndTime(cursor.getInt(offset + 5));
        entity.setFightCount(cursor.getInt(offset + 6));
        entity.setRunCount(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GameContext entity, long rowId) {
        entity.set_Id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GameContext entity) {
        if(entity != null) {
            return entity.get_Id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GameContext entity) {
        return entity.get_Id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
