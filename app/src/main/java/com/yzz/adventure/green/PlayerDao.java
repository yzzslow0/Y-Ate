package com.yzz.adventure.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yzz.adventure.model.Player;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAYER".
*/
public class PlayerDao extends AbstractDao<Player, Long> {

    public static final String TABLENAME = "PLAYER";

    /**
     * Properties of entity Player.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Level = new Property(2, int.class, "level", false, "LEVEL");
        public final static Property Clazz = new Property(3, int.class, "clazz", false, "CLAZZ");
        public final static Property Position = new Property(4, int.class, "position", false, "POSITION");
        public final static Property Exp = new Property(5, int.class, "exp", false, "EXP");
        public final static Property BaseStr = new Property(6, int.class, "baseStr", false, "BASE_STR");
        public final static Property BaseInt = new Property(7, int.class, "baseInt", false, "BASE_INT");
        public final static Property BaseAgi = new Property(8, int.class, "baseAgi", false, "BASE_AGI");
        public final static Property BaseVit = new Property(9, int.class, "baseVit", false, "BASE_VIT");
        public final static Property BaseLuck = new Property(10, int.class, "baseLuck", false, "BASE_LUCK");
        public final static Property BaseSpeed = new Property(11, int.class, "baseSpeed", false, "BASE_SPEED");
        public final static Property HeadImg = new Property(12, int.class, "headImg", false, "HEAD_IMG");
        public final static Property WeaponId = new Property(13, int.class, "weaponId", false, "WEAPON_ID");
        public final static Property ArmorId = new Property(14, int.class, "armorId", false, "ARMOR_ID");
        public final static Property ShieldId = new Property(15, int.class, "shieldId", false, "SHIELD_ID");
        public final static Property RingId = new Property(16, int.class, "ringId", false, "RING_ID");
        public final static Property Ring2Id = new Property(17, int.class, "ring2Id", false, "RING2_ID");
        public final static Property Hp = new Property(18, int.class, "hp", false, "HP");
        public final static Property Mp = new Property(19, int.class, "mp", false, "MP");
        public final static Property HpMax = new Property(20, int.class, "hpMax", false, "HP_MAX");
        public final static Property MpMax = new Property(21, int.class, "mpMax", false, "MP_MAX");
    }


    public PlayerDao(DaoConfig config) {
        super(config);
    }
    
    public PlayerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAYER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"LEVEL\" INTEGER NOT NULL ," + // 2: level
                "\"CLAZZ\" INTEGER NOT NULL ," + // 3: clazz
                "\"POSITION\" INTEGER NOT NULL ," + // 4: position
                "\"EXP\" INTEGER NOT NULL ," + // 5: exp
                "\"BASE_STR\" INTEGER NOT NULL ," + // 6: baseStr
                "\"BASE_INT\" INTEGER NOT NULL ," + // 7: baseInt
                "\"BASE_AGI\" INTEGER NOT NULL ," + // 8: baseAgi
                "\"BASE_VIT\" INTEGER NOT NULL ," + // 9: baseVit
                "\"BASE_LUCK\" INTEGER NOT NULL ," + // 10: baseLuck
                "\"BASE_SPEED\" INTEGER NOT NULL ," + // 11: baseSpeed
                "\"HEAD_IMG\" INTEGER NOT NULL ," + // 12: headImg
                "\"WEAPON_ID\" INTEGER NOT NULL ," + // 13: weaponId
                "\"ARMOR_ID\" INTEGER NOT NULL ," + // 14: armorId
                "\"SHIELD_ID\" INTEGER NOT NULL ," + // 15: shieldId
                "\"RING_ID\" INTEGER NOT NULL ," + // 16: ringId
                "\"RING2_ID\" INTEGER NOT NULL ," + // 17: ring2Id
                "\"HP\" INTEGER NOT NULL ," + // 18: hp
                "\"MP\" INTEGER NOT NULL ," + // 19: mp
                "\"HP_MAX\" INTEGER NOT NULL ," + // 20: hpMax
                "\"MP_MAX\" INTEGER NOT NULL );"); // 21: mpMax
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAYER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getClazz());
        stmt.bindLong(5, entity.getPosition());
        stmt.bindLong(6, entity.getExp());
        stmt.bindLong(7, entity.getBaseStr());
        stmt.bindLong(8, entity.getBaseInt());
        stmt.bindLong(9, entity.getBaseAgi());
        stmt.bindLong(10, entity.getBaseVit());
        stmt.bindLong(11, entity.getBaseLuck());
        stmt.bindLong(12, entity.getBaseSpeed());
        stmt.bindLong(13, entity.getHeadImg());
        stmt.bindLong(14, entity.getWeaponId());
        stmt.bindLong(15, entity.getArmorId());
        stmt.bindLong(16, entity.getShieldId());
        stmt.bindLong(17, entity.getRingId());
        stmt.bindLong(18, entity.getRing2Id());
        stmt.bindLong(19, entity.getHp());
        stmt.bindLong(20, entity.getMp());
        stmt.bindLong(21, entity.getHpMax());
        stmt.bindLong(22, entity.getMpMax());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Player entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindLong(3, entity.getLevel());
        stmt.bindLong(4, entity.getClazz());
        stmt.bindLong(5, entity.getPosition());
        stmt.bindLong(6, entity.getExp());
        stmt.bindLong(7, entity.getBaseStr());
        stmt.bindLong(8, entity.getBaseInt());
        stmt.bindLong(9, entity.getBaseAgi());
        stmt.bindLong(10, entity.getBaseVit());
        stmt.bindLong(11, entity.getBaseLuck());
        stmt.bindLong(12, entity.getBaseSpeed());
        stmt.bindLong(13, entity.getHeadImg());
        stmt.bindLong(14, entity.getWeaponId());
        stmt.bindLong(15, entity.getArmorId());
        stmt.bindLong(16, entity.getShieldId());
        stmt.bindLong(17, entity.getRingId());
        stmt.bindLong(18, entity.getRing2Id());
        stmt.bindLong(19, entity.getHp());
        stmt.bindLong(20, entity.getMp());
        stmt.bindLong(21, entity.getHpMax());
        stmt.bindLong(22, entity.getMpMax());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Player readEntity(Cursor cursor, int offset) {
        Player entity = new Player( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // level
            cursor.getInt(offset + 3), // clazz
            cursor.getInt(offset + 4), // position
            cursor.getInt(offset + 5), // exp
            cursor.getInt(offset + 6), // baseStr
            cursor.getInt(offset + 7), // baseInt
            cursor.getInt(offset + 8), // baseAgi
            cursor.getInt(offset + 9), // baseVit
            cursor.getInt(offset + 10), // baseLuck
            cursor.getInt(offset + 11), // baseSpeed
            cursor.getInt(offset + 12), // headImg
            cursor.getInt(offset + 13), // weaponId
            cursor.getInt(offset + 14), // armorId
            cursor.getInt(offset + 15), // shieldId
            cursor.getInt(offset + 16), // ringId
            cursor.getInt(offset + 17), // ring2Id
            cursor.getInt(offset + 18), // hp
            cursor.getInt(offset + 19), // mp
            cursor.getInt(offset + 20), // hpMax
            cursor.getInt(offset + 21) // mpMax
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Player entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLevel(cursor.getInt(offset + 2));
        entity.setClazz(cursor.getInt(offset + 3));
        entity.setPosition(cursor.getInt(offset + 4));
        entity.setExp(cursor.getInt(offset + 5));
        entity.setBaseStr(cursor.getInt(offset + 6));
        entity.setBaseInt(cursor.getInt(offset + 7));
        entity.setBaseAgi(cursor.getInt(offset + 8));
        entity.setBaseVit(cursor.getInt(offset + 9));
        entity.setBaseLuck(cursor.getInt(offset + 10));
        entity.setBaseSpeed(cursor.getInt(offset + 11));
        entity.setHeadImg(cursor.getInt(offset + 12));
        entity.setWeaponId(cursor.getInt(offset + 13));
        entity.setArmorId(cursor.getInt(offset + 14));
        entity.setShieldId(cursor.getInt(offset + 15));
        entity.setRingId(cursor.getInt(offset + 16));
        entity.setRing2Id(cursor.getInt(offset + 17));
        entity.setHp(cursor.getInt(offset + 18));
        entity.setMp(cursor.getInt(offset + 19));
        entity.setHpMax(cursor.getInt(offset + 20));
        entity.setMpMax(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Player entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Player entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Player entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
